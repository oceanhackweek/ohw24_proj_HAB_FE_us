---
title: "PACE with R, first Steps"
format: 
  html:
    self-contained: true
    toc: true
---


```{r}
#| label: general packages

library(rnaturalearth) # Shape/country/coastline shapefiles
library(ncdf4) # Netcdf opening and subsetting
library(sf)    # spatial dataframes, for points/polygons etc.
library(stars) # spatial arrays, for gridded spatial information
library(terra)
```



# PACE Satellite Data with R

This is a follow along of what trying to access PACE data looks like if you are just trying to google your way into locating it. Target audience is users that may be ccomfortable with R and working with raster or Netcdf files, but has not used NASA datasets.


## Setting up Earthdata ACCESS

NASA PACE Satellite data is made accessible through the earthdata distribution platform powered by amazon AWS.

This service requires setting up Earthdata Login Credentials.

The [earthdatalogin package](https://github.com/boettiger-lab/earthdatalogin) can be used to login with credentials created on [NASA Earthdata](https://www.earthdata.nasa.gov/).

This chunk of code will prompt you to enter username and password information on its first use, and then store this information securely in a hidden file `.netrc`.

```{r}
# Access credentials
# install.packages("earthdatalogin")
library(earthdatalogin)

# Set up netrc credential file
earthdatalogin::edl_netrc()
```


### URL Discovery

Using [earthdatalogin](https://github.com/boettiger-lab/earthdatalogin) we have established credential access. We're still missing the URL discovery funcitonality of [earthaccess](https://github.com/nsidc/earthaccess)

One way to explore available data in the browser is with the Earthdata:

https://search.earthdata.nasa.gov 



# S3 Granule Discovery

For R users the process of granule discovery and access is actively being developed. 

Presently, users must have a functioning install of the development version of `earthdatalogin`, which can be done with: `devtools::install_github("boettiger-lab/earthdatalogin")` (this is not working
for me.)

Some additional conversations that I encountered while googling for: "earthdata access from R" that were helpful for broader context of the state of development and their challenges.

[NMFS Open Science EDMW Workshop 3B](https://nmfs-opensci.github.io/EDMW-EarthData-Workshop-2024/tutorials/r/1-earthdatalogin.html)

[OpenScapes earthdata: python r handoff](https://nasa-openscapes.github.io/earthdata-cloud-cookbook/in-development/earthdata-python-r-handoff.html)


## Granule Discovery in R

The "easiest" way (if its working) to find+open the data woulb be to use `earthdatalogin` in a similar way to `earthaccess` to find search and discover, then take that information over to R.

Using the `earthdatalogin::edl_search()` function searches for s3 granules using
the dataset short_name and for specific area and times.

A helpful guide on how to do this can be found [here.](https://nmfs-opensci.github.io/EDMW-EarthData-Workshop-2024/tutorials/r/1-earthdatalogin.html)

There are multiple keywords we can use to discover data from collections. The table below contains the short_name, concept_id, and doi for some collections we are interested in for the tutorials today. Each of these can be used to search for data or information related to the collection we are interested in.


In practice this should eventually look and work like this:

```{r}
#| eval: false

short_name <- "PACE_OCI_L3M_CHL_NRT"
tbox <- c("2023-01-16", "2020-12-16")

# Search:
results <- edl_search(
    short_name = short_name,
    version = "4.1",
    temporal = tbox
)

results[1:3]
```

There exists an online paper trail detailing an old deprecated workflow using `httr`
to hit the earthdata api and return amazon s3 information to access the data.
 
 https://urs.earthdata.nasa.gov/documentation/for_users/data_access/r 
 
 The original code is below:


```{r}
#| label: httr script
#| eval: false

# Set up R
# You may need to install the httr package.
# install.packages("httr")
library(httr)

netrc_path <- "/path/to/.netrc"
cookie_path <- "/path/to/.urs_cookies"
downloaded_file_path <- "/path/to/filename"

# Before using the script
#Set up your ~/.netrc file as listed here: https://wiki.earthdata.nasa.gov/display/EL/How+To+Access+Data+With+cURL+And+Wget
set_config(config(followlocation=1,netrc=1,netrc_file=netrc_path,cookie=cookie_path,cookiefile=cookie_path,cookiejar=cookie_path))
httr::GET(url = "https://disc2.gesdisc.eosdis.nasa.gov/data/TRMM_RT/TRMM_3B42RT_Daily.7/2000/03/3B42RT_Daily.20000301.7.nc4",
                  write_disk(downloaded_file_path, overwrite = TRUE))
```


This code could likely be updated using the `httr2` package to provide similar functionality to `earthaccess`.

Details on the earthdata api can be found here:
https://cmr.earthdata.nasa.gov/search/site/docs/search/api.html#general-request-details 

```{r}
#install.packages("httr2")
library(httr2)

# # Another S3 package:
# install.packages("aws.s3")
```




## Using python for S3 Granule Discovery

Unfortunately, at the moment the dataset granule discovery functionality is more 
built out and available with the python library `earthaccess`

One way to take advantage of this would be to make a python code chunk, and use this library to discover/query available dataset granules.

```{python}
#| eval: false

import earthaccess

# 1. Login
earthaccess.login(persist=True)

# 2. Search for Ocean Color Index Data
results = earthaccess.search_datasets(instrument="oci")
for item in results:
    summary = item.summary()
    print(summary["short-name"])


```

The URL's can be printed this way:

```{python}
#| eval: false

# Searching by short name for PACE chl
results = earthaccess.search_data(
    short_name="PACE_OCI_L3M_CHL_NRT"
)

# We can look at the urls
[result.data_links() for result in results[0:3]]
```


Using python in an R tutorial also feels like cheating, but lets just move forward and make some plots...


### Opening/Downloading Granules in R

If we have the https endpoints for a dataset/granule we can open them directly using familiar R methods appropriate for the datatype.

The following code can be used to open & explore Ocean Color Index Data PACE data.

```{r}
# Open some url
# PACE URL from search.earthdata

url <- "https://obdaac-tea.earthdatacloud.nasa.gov/ob-cumulus-prod-public/PACE_OCI.20240826.L3m.DAY.CHL.V2_0.chlor_a.0p1deg.NRT.nc"
filepath <- here::here("data", "PACE_OCI.20240826.L3m.DAY.CHL.V2_0.chlor_a.0p1deg.NRT.nc")


# Download the file
utils::download.file(
  url = url, 
  destfile = filepath)



#### Option 2: PACE OCI from github

# # Here is a direct link to the hypercoast github
# url <- "https://github.com/opengeos/datasets/releases/download/netcdf/PACE_OCI.20240423T184658.L2.OC_AOP.V1_0_0.NRT.nc"
# 
# # Download the file to a target location
# filepath <- here::here("data/PACE_OCI.20240423T184658.L2.OC_AOP.V1_0_0.NRT.nc")
# 
# # Download the file
# utils::download.file(
#   url = url, 
#   destfile = filepath)
```



### Terra

```{r}
#| eval: false

# Data from tutorial
url <- earthdatalogin::lpdacc_example_url()
ras <- terra::rast(url)
plot(ras)
```


```{r}
# Use terra to open 
oci_terra <- terra::rast(url)
```


### ncdf4

```{r}
# Use ncdf4
oci_nc <- ncdf4::nc_open(url)
```



